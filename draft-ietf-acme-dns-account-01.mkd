---
title: "Automated Certificate Management Environment (ACME) DNS Labeled With ACME Account ID Challenge"
abbrev: "ACME-DNS-ACCOUNT-01"
category: std

docname: draft-ietf-acme-dns-account-01-00
v: 3
area: Security
workgroup: Automated Certificate Management Environment
keyword: acme
ipr: full3978trust200902
venue:
  group: WG
  type: Working Group
  mail: acme@ietf.org
  arch: https://datatracker.ietf.org/wg/acme/about/
  github: daknob/draft-todo-chariton-dns-account-01
  latest: https://daknob.github.io/draft-todo-chariton-dns-account-01/

author:
 -
    fullname: Antonios A. Chariton
    organization: Independent Contributor
    email: daknob@daknob.net
 -
    fullname: Amir A. Omidi
    organization: Google
    email: aaomidi@google.com
 -
    fullname: James Kasten
    organization: Google
    email: jdkasten@google.com
 -
    fullname: Fotis Loukos
    organization: Google
    email: fotisl@google.com
 -
    fullname: Stanislaw A. Janikowski
    organization: Google
    email: stanwise@google.com

normative:
  FIPS180-4:
    title: "Secure Hash Standard (SHS)"
    date: 2015-08
    target: https://csrc.nist.gov/publications/detail/fips/180/4/final
    author:
      org: National Institute of Standards and Technology

informative:

--- abstract

This document describes `dns-account-01`, a DNS-based challenge for the ACME protocol that
permits delegation of a challenge-solving for a single domain to multiple
systems distinguished by their ACME Account ID.

--- middle

# Introduction

To perform domain control validation, the `dns-01` challenge specified in section 8.4 of {{!RFC8555}} utilizes a `TXT` record attached to the `_acme-challenge` label under the domain name. The controller of a domain can delegate challenge-solving with the help of a `CNAME`. Since the label is fixed, `dns-01` effectively limits delegation to a single entity.

This limitation poses a challenge to systems that aim to serve content for the same domain while maintaining isolation from each other. Examples of such systems include:

- Multi-region deployments with separate availability zones serving the same content
- Zero-downtime migrations that maintain two distinct copies of the same infrastructure for an extended period of time

In these systems, the uniqueness of the `_acme-challenge` label imposed by `dns-01` forces operators to delegate challenge solving to a single solver. This creates a shared dependency between otherwise-isolated infrastructure.

This document specifies a new challenge type, `dns-account-01`. This challenge type alleviates the aforementioned limitation
by leveraging the ACME Account Resource URL to generate stable per-account labels for
domain control validation. Under this challenge type, challenge-solving can be delegated to multiple entities, provided that each entity maintains its own ACME Account.

The per-account labels utilized by `dns-account-01` can each have a different `CNAME` record delegating challenge-solving. The account-specific component of the
label depends on the ACME Account ID, not the ACME Account Key, to allow for seamless account key rollover. This permits long-lived labels without any security considerations.

This RFC does not intend to deprecate or alter the `dns-01` challenge specified in
{{!RFC8555}}. Since this new challenge does not modify or build on any
pre-existing challenges, the ability to complete the `dns-account-01` challenge
requires ACME server operators to deploy new changes to their codebase. This
makes adopting and using `dns-account-01` an opt-in process.

# Conventions and Definitions

{::boilerplate bcp14-tagged}

# DNS-ACCOUNT-01 Challenge

When the identifier being validated is a domain name, the client can prove control of that domain by provisioning a `TXT` resource record containing a designated value for a specific validation domain name.

* type (required, string): The string "dns-account-01".
* token (required, string): A random value that uniquely identifies the challenge. This value MUST have at least 128 bits of entropy. It MUST NOT contain any characters outside the base64url alphabet, including padding characters ("="). See {{!RFC4086}} for additional information on additional requirements for secure randomness.

~~~
{
    "type": "dns-account-01",
    "url": "https://example.com/acme/chall/i00MGYwLWIx",
    "status": "pending",
    "token": "ODE4OWY4NTktYjhmYS00YmY1LTk5MDgtZTFjYTZmNjZlYTUx"
}
~~~

A client fulfills this challenge by performing the following steps:

1. Construct a key authorization {{!RFC8555, Section 8.1}} from the `token` value provided in the challenge and the client's account key
2. Compute the SHA-256 digest {{FIPS180-4}} of the key authorization
3. Construct the validation domain name by prepending the following validation label to the domain name being validated:

      "_acme-challenge_" || base32(SHA-256(Account Resource URL)[0:9])

   - SHA-256 is the SHA hashing operation defined in {{!RFC6234}}
   - `[0:9]` is the operation that selects the first ten bytes (bytes 0 through 9 inclusive) from the previous SHA-256 operation
   - base32 is the operation defined in {{!RFC4648}}
   - Account Resource URL is defined in {{!RFC8555, Section 7.3}} as the value in the Location header field
   - The `"||"` operator indicates concatenation of strings

4. Provision a DNS `TXT` record with the base64url digest value under the constructed domain validation name

For example, if the domain name being validated is `www.example.org` and the ACME account URL is `https://example.com/acme/acct/ExampleAccount`, then the client would provision the following DNS record:

~~~
_acme-challenge_ujmmovf2vn55tgye.www.example.org 300 IN TXT "LoqXcYV8...jxAjEuX0.9jg46WB3...fm21mqTI"
~~~

In the above example, `...` indicates that characters have been omitted to  ensure the example fits on the page.

A client respond to the ACME server with an empty object ({}) to acknowledge that the challenge can be validated by the server.

~~~
POST /acme/chall/Rg5dV14Gh1Q
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "SS2sSl1PtspvFZ08kNtzKd",
    "url": "https://example.com/acme/chall/Rg5dV14Gh1Q"
  }),
  "payload": base64url({}),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
~~~

On receiving a response, the server constructs and stores the key authorization from the challenge `token` value and the current client account key.

To validate the `dns-account-01` challenge, the server performs the following steps:

1. Compute the SHA-256 digest {{FIPS180-4}} of the stored key authorization
2. Compute the validation domain name with the account URL of the ACME account requesting validation
3. Query for `TXT` records for the validation domain name
4. Verify that the contents of one of the `TXT` records match the digest value

If all the above verifications succeed, then the validation is successful. If no DNS record is found, or DNS record and response payload do not pass these checks, then the server MUST fail the validation and mark the challenge as invalid.

The client SHOULD de-provision the resource record(s) provisioned for this challenge once the challenge is complete, i.e., once the "status" field of the challenge has the value "valid" or "invalid".

# Security Considerations

As this challenge that is introduced only differs in the left-most label of the domain name from the existing `dns-01` challenge described in {{!RFC8555}}, the same security considerations apply.

The validation label prepended to the domain name is intended to be long-lived and likely distinct from other ACME accounts. Minimal length is more important that guaranteed uniqueness. The first 10 bytes were picked as a tradeoff: the value should be short enough to minimize the impact on DNS record and response size, long enough to provide sufficient probability of collision avoidance across ACME accounts to which certificates for the same domain will be issued, and a multiple of 5 bytes to avoid base32's padding. 

The validation label prepended to the domain name is intended be stable and predictable; it does not need to utilize a cryptographic hash. SHA-256 was picked due to its broad adoption, hardware support, and existing need in implementations that would likely support `dns-account-01`. As the algorithm is used for uniform distribution of inputs, not for integrity, the small keyspace does not impact security.



# IANA Considerations

## DNS Parameters

The Underscored and Globally Scoped DNS Node Names is to be updated to include the following entry:

~~~
RR Type: TXT
_NODE NAME: _acme-challenge_*
Reference: This document
~~~

Where `_acme-challenge_*` denotes all node names beginning with the string `_acme-challenge_`. It does NOT refer to a DNS wildcard specification.

## ACME Validation Method

The "ACME Validation Methods" registry is to be updated to include the following entry:

~~~
label: dns-account-01
identifier-type: dns
ACME: Y
Reference: This document
~~~


--- back

# Acknowledgments
{:numbered="false"}
